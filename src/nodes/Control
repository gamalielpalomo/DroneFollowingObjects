#!/usr/bin/env python
import rospy
import time
from std_msgs.msg import String
from std_msgs.msg import Empty
from geometry_msgs.msg import Twist

def callback(data):
	rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
def descifrar(data):
	print("[CONTROL] Message: "+data.data)
	instruction = data.data
	print instruction
	if instruction == "takeoff":
		takeoff()
	if instruction == "land":
		land()
	if instruction == "forward":
		forward()
def listener():
	rospy.init_node('Control', anonymous=True)
	rospy.Subscriber("Instruction", String, descifrar)
	print("[CONTROL] Listener started")
	rospy.spin()

#########################################################################
# Definicion de las acciones primitivas #

def takeoff():
	print ("[CONTROL]: Takeoff procedure started...");
        pub = rospy.Publisher("ardrone/takeoff", Empty, queue_size=10 )
	pub.publish(Empty())
def land():
	print ("[CONTROL]: Land procedure started...");
        pub = rospy.Publisher("ardrone/land", Empty, queue_size=10 )
	pub.publish(Empty())
def forward():
	print ("[CONTROL]: Move Forward procedure started...");
        pub = rospy.Publisher("/cmd_vel", Twist, queue_size=10 )
	msg = Twist()
	msg.linear.x = 0.05	
	pub.publish(msg)

if __name__ == '__main__':
        try:
          listener()
        except rospy.ROSInterruptException:
          pass
